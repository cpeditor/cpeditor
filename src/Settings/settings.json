[
  {
    "name": "Tab Width",
    "type": "int",
    "default": 4,
    "param": "QVariantList {1,16}",
    "tip": "The width of the tab character, or the number of spaces of an indent",
    "old": ["tab_stop"]
  },
  {
    "name": "Cursor Width",
    "type": "int",
    "default": 1,
    "param": "QVariantList {1,10}",
    "tip": "The width of the cursor in pixels"
  },
  {
    "name": "Geometry",
    "type": "QRect",
    "notr": true
  },
  {
    "name": "Editor Font",
    "type": "QFont",
    "default": "[](){ QFont font = QFontDatabase::systemFont(QFontDatabase::FixedFont); font.setStyleHint(QFont::TypeWriter); return font; }()",
    "param": "true",
    "tip": "The font of the code editor",
    "old": ["font"]
  },
  {
    "name": "Use Custom Application Font",
    "type": "bool",
    "tip": "Use a custom font for the whole application instead of the default system font."
  },
  {
    "name": "Custom Application Font",
    "type": "QFont",
    "default": "QFontDatabase::systemFont(QFontDatabase::GeneralFont)",
    "param": "false",
    "depends": [
      {
        "name": "Use Custom Application Font"
      }
    ],
    "tip": "The custom font for the whole application"
  },
  {
    "name": "Default Language",
    "type": "QString",
    "default": "C++",
    "ui": "QComboBox",
    "param": "QStringList {\"C++\", \"Java\", \"Python\"}",
    "tip": "The default language used when opening new tabs"
  },
  {
    "name": "Clang Format/Program",
    "type": "QString",
    "default": "clang-format",
    "ui": "PathItem",
    "param": "PathItem::Executable",
    "tip": "The path to the Clang Format executable file",
    "old": ["clang_format_binary", "clang_format/path"]
  },
  {
    "name": "Clang Format/Arguments",
    "type": "QString",
    "tip": "The arguments passed to clang-format. It should NOT contain \"-i\"."
  },
  {
    "name": "Clang Format/Style",
    "type": "QString",
    "default": "BasedOnStyle: Google",
    "ui": "QPlainTextEdit",
    "tip": "The Clang Format style options, which are usually saved in a .clang-format configuration file.\nYou can learn about it at <https://clang.llvm.org/docs/ClangFormatStyleOptions.html>.",
    "old": ["clang_format_style"]
  },
  {
    "name": "YAPF/Program",
    "type": "QString",
    "default": "python",
    "ui": "PathItem",
    "param": "PathItem::Executable",
    "tip": "The program of YAPF. It could be `yapf` (which doesn't need arguments) or `python` (which needs `-m yapf` as the arguments)."
  },
  {
    "name": "YAPF/Arguments",
    "type": "QString",
    "default": "-m yapf",
    "tip": "The arguments passed to the YAPF program. It should NOT contain \"-i\"."
  },
  {
    "name": "YAPF/Style",
    "type": "QString",
    "default": "[style]\nbased_on_style = pep8",
    "ui": "QPlainTextEdit",
    "tip": "The YAPF style options, which are usually saved in a .style.yapf or setup.conf configuration file.\nYou can learn about it by running `yapf --style-help`."
  },
  {
    "name": "Format On Manual Save",
    "desc": "Format code on manual save",
    "type": "bool",
    "tip": "Format the code when saving it manually.",
    "old": [
      "format_on_save",
      "auto_format",
      "clang_format/format_on_manual_save"
    ]
  },
  {
    "name": "Format On Auto Save",
    "desc": "Format code on auto-save",
    "type": "bool",
    "tip": "Format the code when auto-saving it.",
    "old": ["clang_format/format_on_auto_save"]
  },
  {
    "name": "C++/Template Path",
    "type": "QString",
    "ui": "PathItem",
    "param": "PathItem::CppSource",
    "tip": "The template used when creating a new C++ file",
    "old": ["template_cpp"]
  },
  {
    "name": "C++/Template Cursor Position Regex",
    "type": "QString",
    "default": "main\\(\\)",
    "depends": [
      {
        "name": "C++/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "The regular expression which matches a part of the code template.\nWhen opening a template, the position of the cursor is the position of the regex with an offset.\nThe cursor will be at the end of the template if there's no match of the regex."
  },
  {
    "name": "C++/Template Cursor Position Offset Type",
    "type": "QString",
    "default": "end",
    "ui": "QComboBox",
    "param": "QStringList {\"start\", \"end\"}",
    "depends": [
      {
        "name": "C++/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "Whether the offset is relative to the start of the regex or the end of the regex."
  },
  {
    "name": "C++/Template Cursor Position Offset Characters",
    "type": "int",
    "default": 4,
    "param": "QVariantList {-1000000, 1000000}",
    "depends": [
      {
        "name": "C++/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "The offset relative to the match of the regex in the number of characters, including white spaces."
  },
  {
    "name": "C++/Compile Command",
    "type": "QString",
    "default": "c++ -Wall",
    "tip": "The command used to compile C++. It should NOT include the path to the source file or \"-o <output file>\".",
    "old": ["compile_cpp"]
  },
  {
    "name": "C++/Output Path",
    "desc": "C++ Executable File Path",
    "type": "QString",
    "default": "${tmpdir}/${basename}",
    "tip": "The path of the compiled executable file.\nIt's relative to the source file, or the temporary directory if the tab is untitled.\nNo \".exe\" is needed.\nYou can use \"${filename}\" for the complete file name,\n\"${basename}\" for the base file name without the suffix,\n\"${tmpdir}\" or \"${tempdir}\" for the absolute path of the temporary directory."
  },
  {
    "name": "C++/Run Arguments",
    "type": "QString",
    "tip": "The runtime arguments when executing a C++ program",
    "old": ["runtime_cpp"]
  },
  {
    "name": "C++/Parentheses",
    "type": "QVariantList",
    "default": "QVariantList { QVariantList {'(', ')', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'{', '}', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'[', ']', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'\"', '\"', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'\\'', '\\'', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked} }",
    "notr": true
  },
  {
    "name": "Java/Template Path",
    "type": "QString",
    "ui": "PathItem",
    "param": "PathItem::JavaSource",
    "tip": "The template used when creating a new Java file",
    "old": ["template_java"]
  },
  {
    "name": "Java/Compile Command",
    "type": "QString",
    "default": "javac",
    "tip": "The command used to compile Java.\nIt should NOT include the path to the source file or the path of the compiled class file.",
    "old": ["compile_java"]
  },
  {
    "name": "Java/Run Arguments",
    "type": "QString",
    "default": "",
    "tip": "The runtime arguments when executing a Java program",
    "old": ["runtime_java"]
  },
  {
    "name": "Java/Run Command",
    "type": "QString",
    "default": "java",
    "tip": "The command to start a Java program. It should NOT include \"-classpath <path> <class name>\".",
    "old": ["run_java"]
  },
  {
    "name": "Java/Class Name",
    "type": "QString",
    "default": "Main",
    "tip": "The name of the main class of your solution."
  },
  {
    "name": "Java/Output Path",
    "desc": "Java Class Path",
    "type": "QString",
    "default": "${tmpdir}",
    "tip": "The path of the parent directory of the compiled class file.\nIt's relative to the source file, or the temporary directory if the tab is untitled.\nYou can use \"${filename}\" for the complete file name,\n\"${basename}\" for the base file name without the suffix,\n\"${tmpdir}\" or \"${tempdir}\" for the absolute path of the temporary directory."
  },
  {
    "name": "Java/Template Cursor Position Regex",
    "type": "QString",
    "depends": [
      {
        "name": "Java/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "The regular expression which matches a part of the code template.\nWhen opening a template, the position of the cursor is the position of the regex with an offset.\nThe cursor will be at the end of the template if there's no match of the regex."
  },
  {
    "name": "Java/Template Cursor Position Offset Type",
    "type": "QString",
    "default": "end",
    "ui": "QComboBox",
    "param": "QStringList {\"start\", \"end\"}",
    "depends": [
      {
        "name": "Java/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "Whether the offset is relative to the start of the regex or the end of the regex."
  },
  {
    "name": "Java/Template Cursor Position Offset Characters",
    "type": "int",
    "param": "QVariantList {-1000000, 1000000}",
    "depends": [
      {
        "name": "Java/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "The offset relative to the match of the regex in the number of characters, including white spaces."
  },
  {
    "name": "Java/Parentheses",
    "type": "QVariantList",
    "default": "QVariantList { QVariantList {'(', ')', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'{', '}', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'[', ']', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'\"', '\"', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'\\'', '\\'', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked} }",
    "notr": true
  },
  {
    "name": "Python/Template Path",
    "type": "QString",
    "ui": "PathItem",
    "param": "PathItem::PythonSource",
    "tip": "The template used when creating a new Python file",
    "old": ["template_python"]
  },
  {
    "name": "Python/Template Cursor Position Regex",
    "type": "QString",
    "depends": [
      {
        "name": "Python/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "The regular expression which matches a part of the code template.\nWhen opening a template, the position of the cursor is the position of the regex with an offset.\nThe cursor will be at the end of the template if there's no match of the regex."
  },
  {
    "name": "Python/Template Cursor Position Offset Type",
    "type": "QString",
    "default": "end",
    "ui": "QComboBox",
    "param": "QStringList {\"start\", \"end\"}",
    "depends": [
      {
        "name": "Python/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "Whether the offset is relative to the start of the regex or the end of the regex."
  },
  {
    "name": "Python/Template Cursor Position Offset Characters",
    "type": "int",
    "param": "QVariantList {-1000000, 1000000}",
    "depends": [
      {
        "name": "Python/Template Path",
        "check": "return !var.toString().isEmpty();"
      }
    ],
    "tip": "The offset relative to the match of the regex in the number of characters, including white spaces."
  },
  {
    "name": "Python/Run Arguments",
    "type": "QString",
    "tip": "The runtime arguments when executing a Python program",
    "old": ["runtime_python"]
  },
  {
    "name": "Python/Run Command",
    "type": "QString",
    "default": "python",
    "tip": "The command to start a Python program. It should NOT include the path to the source file.",
    "old": ["run_python"]
  },
  {
    "name": "Python/Parentheses",
    "type": "QVariantList",
    "default": "QVariantList { QVariantList {'(', ')', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'{', '}', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'[', ']', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'\"', '\"', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked}, QVariantList {'\\'', '\\'', Qt::PartiallyChecked, Qt::PartiallyChecked, Qt::PartiallyChecked} }",
    "notr": true
  },
  {
    "name": "Editor Theme",
    "type": "QString",
    "default": "Default",
    "ui": "QComboBox",
    "param": "Editor::KSyntaxHighlightingRepository::themeNames()",
    "tip": "The syntax highlight theme of the code editor"
  },
  {
    "name": "Highlight Error Line",
    "type": "bool",
    "default": false,
    "tip": "Highlight lines containing diagnostics"
  },
  {
    "name": "Detached Run Terminal Program",
    "desc": "Terminal Program",
    "type": "QString",
    "default": "xterm",
    "tip": "The terminal emulator to use when running in detached mode.\nThis is usually the name or the path of the terminal emulator.\nSome possible values are konsole, gnome-terminal, xfce-terminal, xterm or any other terminal emulator program."
  },
  {
    "name": "Detached Run Terminal Arguments",
    "desc": "Terminal Arguments",
    "type": "QString",
    "default": "-e",
    "tip": "Arguments used to execute a given command in the terminal emulator.\nThis is \"-e\" for most terminal emulators, including konsole, xterm, xfce-terminal but can be \"--\" for gnome-terminal.\nConsult your terminal emulator for the suitable arguments."
  },
  {
    "name": "Auto Complete Parentheses",
    "type": "bool",
    "default": true,
    "tip": "Automatically complete a pair of parentheses when typing the left element of it,\nand move out of it when typing the right element of it.\nThis can be overridden for each parenthesis in each language.",
    "old": ["auto_parenthesis"]
  },
  {
    "name": "Auto Remove Parentheses",
    "type": "bool",
    "default": true,
    "tip": "Automatically delete the whole pair of parentheses when deleting\nthe left element of it if the two elements are adjacent.\nThis can be overridden for each parenthesis in each language."
  },
  {
    "name": "Tab Jump Out Parentheses",
    "desc": "Jump out of a parenthesis by pressing Tab",
    "type": "bool",
    "tip": "When this is enabled, you can use Tab instead of the\nclosing parenthesis to jump out of a parenthesis.\nThis can be overridden for each parenthesis in each language."
  },
  {
    "name": "Auto Indent",
    "type": "bool",
    "default": true,
    "tip": "Add an indent when entering a new line after a \"{\"."
  },
  {
    "name": "Auto Save",
    "desc": "Enable Auto Save",
    "type": "bool",
    "tip": "Automatically save the file every 3 seconds.",
    "old": ["autosave"]
  },
  {
    "name": "Auto Save Interval",
    "desc": "Auto Save Interval (ms)",
    "type": "int",
    "default": 1000,
    "param": "QVariantList {100, 36000000, 1000}",
    "depends": [
      {
        "name": "Auto Save"
      }
    ],
    "tip": "The time interval between a modification and an auto-save, or between two auto-saves."
  },
  {
    "name": "Auto Save Interval Type",
    "type": "QString",
    "ui": "QComboBox",
    "param": "QStringList { \"After the last modification\", \"After the first modification\", \"Without modification\" }",
    "default": "After the last modification",
    "depends": [
      {
        "name": "Auto Save"
      }
    ],
    "tip": "After the last modification: the timer will be reset after a modification to the code.\nAfter the first modification: the timer will start after a modification if at that time the timer is not running.\nWithout modification: auto-save happens with a constant interval no matter there are modifications or not."
  },
  {
    "name": "Wrap Text",
    "type": "bool",
    "tip": "Wrap a line into several lines if it doesn't fit into the screen."
  },
  {
    "name": "Beta",
    "desc": "Use the beta version",
    "type": "bool",
    "tip": "Check for updates marked as pre-releases, which are considered not very stable but have more features."
  },
  {
    "name": "Replace Tabs",
    "desc": "Replace tabs by spaces",
    "type": "bool",
    "tip": "Use spaces instead of a tab character."
  },
  {
    "name": "Save Tests",
    "desc": "Save Testcases on Save",
    "type": "bool",
    "tip": "Save the test cases on the disk when saving a file, and load the saved test cases when opening a file."
  },
  {
    "name": "Maximized Window",
    "type": "bool",
    "notr": true,
    "old": ["win_max"]
  },
  {
    "name": "Check Update",
    "desc": "Check for updates on startup",
    "type": "bool",
    "default": true,
    "tip": "Check whether there's a new version of CP Editor when starting CP Editor.",
    "old": ["update_start_check"]
  },
  {
    "name": "Opacity",
    "type": "int",
    "default": 100,
    "param": "QVariantList {60,100}",
    "ui": "QSlider",
    "tip": "The opacity of the main window",
    "old": ["transparency"]
  },
  {
    "name": "View Mode",
    "type": "QString",
    "default": "split",
    "notr": true
  },
  {
    "name": "Splitter Size",
    "type": "QByteArray",
    "notr": true,
    "old": ["splitter_sizes"]
  },
  {
    "name": "Right Splitter Size",
    "type": "QByteArray",
    "notr": true,
    "old": ["right_splitter_sizes"]
  },
  {
    "name": "Competitive Companion/Enable",
    "desc": "Enable Competitive Companion",
    "type": "bool",
    "default": true,
    "tip": "Receive data sent by Competitive Companion and load the example test cases.",
    "old": ["competitive_use"]
  },
  {
    "name": "Competitive Companion/Connection Port",
    "desc": "Connection Port",
    "type": "int",
    "default": 10045,
    "param": "QVariantList {1024,49151}",
    "depends": [
      {
        "name": "Competitive Companion/Enable"
      }
    ],
    "tip": "The port used to receive data from Competitive Companion",
    "old": ["connection_port"]
  },
  {
    "name": "Competitive Companion/Open New Tab",
    "desc": "Open New Tabs",
    "type": "bool",
    "default": true,
    "depends": [
      {
        "name": "Competitive Companion/Enable"
      }
    ],
    "tip": "Open a new tab for each problem parsed by Competitive Companion.",
    "old": ["companion_new_tab"]
  },
  {
    "name": "Competitive Companion/Set Time Limit For Tab",
    "desc": "Use the time limit from Competitive Companion",
    "type": "bool",
    "depends": [
      {
        "name": "Competitive Companion/Enable"
      }
    ],
    "tip": "Use the time limit parsed by Competitive Companion as the time limit of the corresponding tab."
  },
  {
    "name": "Competitive Companion/Head Comments",
    "desc": "Content of the head comments",
    "type": "QString",
    "ui": "QPlainTextEdit",
    "default": "Problem: ${json.name}\nContest: ${json.group}\nURL: ${json.url}\nMemory Limit: ${json.memoryLimit} MB\nTime Limit: ${json.timeLimit} ms",
    "depends": [
      {
        "name": "Competitive Companion/Enable"
      }
    ],
    "tip": "The comments added at the head of the code when parsing a problem.\nAvailable place holders are:\n${time}: the time when parsing the problem\n${json.X.Y}: an attribute of the data provided by Competitive Companion, you can read more at https://github.com/jmerle/competitive-companion#explanation"
  },
  {
    "name": "Competitive Companion/Head Comments Time Format",
    "desc": "Time format for the head comments",
    "type": "QString",
    "default": "yyyy-MM-dd HH:mm:ss",
    "depends": [
      {
        "name": "Competitive Companion/Enable"
      }
    ],
    "tip": "The format of the ${time} place holder in the head comments.\nYou can read the Qt documentation for available expressions:\nhttps://doc.qt.io/qt-5/qdate.html#toString\nhttps://doc.qt.io/qt-5/qtime.html#toString"
  },
  {
    "name": "Competitive Companion/Head Comments Powered By CP Editor",
    "desc": "Add \"Powered By CP Editor\" in the head comments",
    "type": "bool",
    "default": true,
    "depends": [
      {
        "name": "Competitive Companion/Enable"
      }
    ],
    "tip": "Add a line saying \"Powered By CP Editor\" in the head comments.\nThis doesn't cost you anything, but helps more people to know CP Editor."
  },
  {
    "name": "Hotkey/Format",
    "desc": "Format Codes",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_format"]
  },
  {
    "name": "Hotkey/Kill",
    "desc": "Kill All Processes",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_kill"]
  },
  {
    "name": "Hotkey/Compile Run",
    "desc": "Compile and Run",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_compile_run"]
  },
  {
    "name": "Hotkey/Run",
    "desc": "Run Only",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_run"]
  },
  {
    "name": "Hotkey/Compile",
    "desc": "Compile Only",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_compile"]
  },
  {
    "name": "Hotkey/Change View Mode",
    "desc": "Change View Mode",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_mode_toggle"]
  },
  {
    "name": "Hotkey/Snippets",
    "desc": "Use Snippets",
    "type": "QString",
    "ui": "ShortcutItem",
    "old": ["hotkey_snippets"]
  },
  {
    "name": "Hot Exit/Enable",
    "desc": "Restore last session at startup",
    "type": "bool",
    "default": true,
    "tip": "Restore the last session when the application starts.\nWhen this is enabled, you won't be asked whether to save unsaved files when exiting.",
    "old": ["use_hot_exit"]
  },
  {
    "name": "Hot Exit/Auto Save",
    "desc": "Auto-save the current session periodically",
    "type": "bool",
    "depends": [
      {
        "name": "Hot Exit/Enable"
      }
    ],
    "tip": "Auto-save the current session periodically instead of only save when the application exists.\nThis is useful if your computer is frozen and you have to cut off the power or\nkill the application with SIGKILL which could not be handled by the application."
  },
  {
    "name": "Hot Exit/Auto Save Interval",
    "desc": "Auto-save Session Interval",
    "type": "int",
    "default": 20000,
    "param": "QVariantList {1000, 36000000, 1000}",
    "depends": [
      {
        "name": "Hot Exit/Enable"
      },
      {
        "name": "Hot Exit/Auto Save"
      }
    ],
    "tip": "The time interval between two auto-saves of the current session."
  },
  {
    "name": "Force Close",
    "type": "bool",
    "notr": true
  },
  {
    "name": "CF/Path",
    "desc": "Path",
    "type": "QString",
    "default": "cf",
    "ui": "PathItem",
    "param": "PathItem::Executable",
    "tip": "The path to the CF Tool executable file",
    "old": ["cf_path"]
  },
  {
    "name": "CF/Show Toast Messages",
    "desc": "Show toast messages for submission verdicts",
    "type": "bool",
    "default": "true",
    "tip": "Show a toast message when the verdict of a submission is known. You can see the message outside of CP Editor."
  },
  {
    "name": "Show Compile And Run Only",
    "type": "bool",
    "tip": "Hide the Compile Only button and the Run Only button under the code editor in the main window.",
    "old": ["compile_and_run_only"]
  },
  {
    "name": "Display EOLN In Diff",
    "type": "bool",
    "tip": "Use \"¶\" to represent for the new line character in the HTML Diff Viewer."
  },
  {
    "name": "Save Faster",
    "desc": "Save Files Faster",
    "type": "bool",
    "tip": "Always use QFile instead of QSaveFile to save files.\nThis will be faster but with a little bit more risk of losing the file (with a very small possibility)."
  },
  {
    "name": "Default Time Limit",
    "desc": "Default Time Limit (ms)",
    "type": "int",
    "default": 5000,
    "param": "QVariantList {1,3600000,1000}",
    "tip": "The default time limit when executing the program.\nThe program will be killed if it doesn't terminate in the time limit.",
    "old": ["time_limit"]
  },
  {
    "name": "Output Length Limit",
    "type": "int",
    "default": 500000,
    "param": "QVariantList {2,1000000000}",
    "tip": "The maximum number of characters in the output of the program.\nThe program will be killed if either of its stdout or stderr is too long."
  },
  {
    "name": "Output Display Length Limit",
    "type": "int",
    "default": 50000,
    "param": "QVariantList {2,100000000}",
    "tip": "The maximum number of characters to be displayed for the output of the program.\nIf the output is too long, it will be elided."
  },
  {
    "name": "Message Length Limit",
    "type": "int",
    "default": 20000,
    "param": "QVariantList {500,100000000}",
    "tip": "The maximum number of characters in each message in the top-right corner of the main window.\nThe message will be elided if it's too long."
  },
  {
    "name": "HTML Diff Viewer Length Limit",
    "type": "int",
    "default": 50000,
    "param": "QVariantList {2,100000000}",
    "tip": "The maximum number of characters in the HTML Diff Viewer.\nThe Diff Viewer will fall back to plain text if either of the output or the expected output is too long."
  },
  {
    "name": "Open File Length Limit",
    "type": "int",
    "default": 20000,
    "param": "QVariantList {2,100000000}",
    "tip": "The maximum number of characters in a source file to open.\nA source file won't be opened if it's too long."
  },
  {
    "name": "Display Test Case Length Limit",
    "type": "int",
    "default": 500000,
    "param": "QVariantList {2,1000000000}",
    "tip": "The maximum number of characters in a test case to be displayed.\nA test case will be elided and read-only if it's too long.",
    "old": ["load_test_case_file_length_limit", "load_test_case_length_limit"]
  },
  {
    "name": "LSP/Path C++",
    "ui": "PathItem",
    "desc": "Path to LSP executable",
    "default": "clangd",
    "type": "QString",
    "param": "PathItem::Executable",
    "requireAllDepends": false,
    "depends": [
      {
        "name": "LSP/Use Linting C++"
      }
    ],
    "tip": "The path to the C++ Language Server executable"
  },
  {
    "name": "LSP/Path Java",
    "ui": "PathItem",
    "desc": "Path to LSP executable",
    "type": "QString",
    "param": "PathItem::Executable",
    "requireAllDepends": false,
    "depends": [
      {
        "name": "LSP/Use Linting Java"
      }
    ],
    "tip": "The path to the Java Language Server executable"
  },
  {
    "name": "LSP/Path Python",
    "ui": "PathItem",
    "desc": "Path to LSP executable",
    "default": "python",
    "type": "QString",
    "param": "PathItem::Executable",
    "requireAllDepends": false,
    "depends": [
      {
        "name": "LSP/Use Linting Python"
      }
    ],
    "tip": "The path to the Python Language Server executable"
  },
  {
    "name": "LSP/Use Linting C++",
    "desc": "Use Linting with Language Server",
    "type": "bool",
    "tip": "Show Error, Warning, Information and Hints in Code Editor for C++ Language"
  },
  {
    "name": "LSP/Use Linting Java",
    "desc": "Use Linting with Language Server",
    "type": "bool",
    "tip": "Show Error, Warning, Information and Hints in Code Editor for Java Language"
  },
  {
    "name": "LSP/Use Linting Python",
    "desc": "Use Linting with Language Server",
    "type": "bool",
    "tip": "Show Error, Warning, Information and Hints in Code Editor for Python Language"
  },
  {
    "name": "LSP/Use Autocomplete C++",
    "desc": "Use auto-complete with Language Server",
    "type": "bool",
    "tip": "Use autocomplete results from Language server"
  },
  {
    "name": "LSP/Use Autocomplete Java",
    "desc": "Use auto-complete with Language Server",
    "type": "bool",
    "tip": "Use autocomplete results from Language server"
  },
  {
    "name": "LSP/Use Autocomplete Python",
    "desc": "Use auto-complete with Language Server",
    "type": "bool",
    "tip": "Use autocomplete results from Language server"
  },
  {
    "name": "LSP/Delay C++",
    "type": "int",
    "desc": "Delay in Linting (ms)",
    "default": 2000,
    "param": "QVariantList {10, 3600000, 1000}",
    "depends": [
      {
        "name": "LSP/Use Linting C++"
      }
    ],
    "tip": "Delay in linting in milliseconds after last modification to code"
  },
  {
    "name": "LSP/Delay Java",
    "type": "int",
    "desc": "Delay in Linting (ms)",
    "default": 2000,
    "param": "QVariantList {10, 3600000, 1000}",
    "depends": [
      {
        "name": "LSP/Use Linting Java"
      }
    ],
    "tip": "Delay in linting in milliseconds after last modification to code"
  },
  {
    "name": "LSP/Delay Python",
    "type": "int",
    "desc": "Delay in Linting (ms)",
    "default": 2000,
    "param": "QVariantList {10, 3600000, 1000}",
    "depends": [
      {
        "name": "LSP/Use Linting Python"
      }
    ],
    "tip": "Delay in linting in milliseconds after last modification to code"
  },
  {
    "name": "LSP/Args C++",
    "desc": "Arguments for Language Server",
    "type": "QString",
    "requireAllDepends": false,
    "depends": [
      {
        "name": "LSP/Use Linting C++"
      }
    ],
    "tip": "Arguments to pass to Language server executable"
  },
  {
    "name": "LSP/Args Java",
    "desc": "Arguments for Language Server",
    "type": "QString",
    "requireAllDepends": false,
    "depends": [
      {
        "name": "LSP/Use Linting Java"
      }
    ],
    "tip": "Arguments to pass to Language server executable"
  },
  {
    "name": "LSP/Args Python",
    "desc": "Arguments for Language Server",
    "default": "-m pyls",
    "type": "QString",
    "requireAllDepends": false,
    "depends": [
      {
        "name": "LSP/Use Linting Python"
      }
    ],
    "tip": "Arguments to pass to Language server executable"
  },
  {
    "name": "Testcases Matching Rules",
    "type": "QVariantList",
    "default": "QVariantList { QStringList {\"(.*)\\\\.in\", \"\\\\1.ans\"}, QStringList {\"(.*)\\\\.in\", \"\\\\1.out\"}}",
    "param": "QVariantList { QStringList {tr(\"Input Regex\"), tr(\"The regular expression which matches the whole input file name\")}, QStringList {tr(\"Answer Replace\"), tr(\"The replace expression for the answer file name.\\nYou can use \\\"\\\\1\\\" for the first captured group.\")}}",
    "tip": "Pairs of regular expressions used when adding pairs of test cases from files.\nEach pair of regular expressions represents a test case."
  },
  {
    "name": "Input File Save Path",
    "type": "QString",
    "default": "./${basename}_${1-index}.in",
    "tip": "The path where the input files are saved.\nThis setting is a relative path to the source file.\nYou can use \"${filename}\" for the complete file name,\n\"${basename}\" for the base file name without the suffix,\n\"${0-index}\" for the index of the test case started from 0,\n\"${1-index}\" for the index of the test case started from 1."
  },
  {
    "name": "Answer File Save Path",
    "type": "QString",
    "default": "./${basename}_${1-index}.ans",
    "tip": "The path where the answer files are saved.\nThis setting is a relative path to the source file.\nYou can use \"${filename}\" for the complete file name,\n\"${basename}\" for the base file name without the suffix,\n\"${0-index}\" for the index of the test case started from 0,\n\"${1-index}\" for the index of the test case started from 1."
  },
  {
    "name": "Default File Paths For Problem URLs",
    "type": "QVariantList",
    "default": "QVariantList {}",
    "param": "QVariantList { QStringList { tr(\"Problem URL\"), tr(\"The regular expression which matches a part of the problem URL\")}, QStringList {tr(\"File Path\"), tr(\"The replace expression for the file path, without file name suffix.\\nYou can use \\\"\\\\1\\\" for the first captured group.\")}}",
    "tip": "The default file path used when saving a new file while the problem URL is set"
  },
  {
    "name": "Test Cases Font",
    "type": "QFont",
    "default": "[](){ QFont font = QFontDatabase::systemFont(QFontDatabase::FixedFont); font.setStyleHint(QFont::TypeWriter); return font; }()",
    "param": "true",
    "tip": "The font of test cases"
  },
  {
    "name": "Extra Bottom Margin",
    "desc": "Add extra margin at the bottom of the code editor",
    "type": "bool",
    "tip": "Add an extra margin with the height of a page at the bottom of the code editor.\nDue to technical reasons, changing the height of the margin affects the undo history."
  },
  {
    "name": "Message Logger Font",
    "type": "QFont",
    "default": "[](){ QFont font = QFontDatabase::systemFont(QFontDatabase::FixedFont); font.setStyleHint(QFont::TypeWriter); return font; }()",
    "param": "true",
    "tip": "The font of the message logger"
  },
  {
    "name": "Save File On Compilation",
    "type": "bool",
    "default": "true",
    "tip": "Save the source file when compiling it. It won't be saved if the tab is untitled."
  },
  {
    "name": "Save File On Execution",
    "type": "bool",
    "tip": "Save the source file when running it. It won't be saved if the tab is untitled."
  },
  {
    "name": "Restore Old Problem Url",
    "desc": "Restore the problem URL when opening a file",
    "type": "bool",
    "tip": "If a problem URL was set for a file, when you open\nthat file again, the problem URL will be restored."
  },
  {
    "name": "Open Old File For Old Problem Url",
    "desc": "Open the old file when parsing an old problem URL",
    "type": "bool",
    "tip": "If a problem URL was set for a file, when parsing that problem\nfrom Competitive Companion again, the old file will be opened."
  },
  {
    "name": "Locale",
    "desc": "UI Language",
    "type": "QString",
    "ui": "QComboBox",
    "default": "system",
    "param": "QStringList { \"system\", \"Νέα Ελληνικά\", \"English\", \"Español\", \"Português brasileiro\", \"Русский\", \"简体中文\", \"正體中文\" }",
    "tip": "The language displayed in the UI.",
    "onApply": "Core::Translator::setLocale(); QMessageBox::warning(parent, tr(\"Change Locale\"), tr(\"You need to restart the application to completely apply the locale change.\"));"
  },
  {
    "name": "UI Style",
    "type": "QString",
    "ui": "QComboBox",
    "default": "default",
    "param": "Core::StyleManager::styleList()",
    "tip": "The style of the whole application."
  },
  {
    "name": "Language Config",
    "type": "Object",
    "sub": [
      {
        "name": "Snippet",
        "plural": "Snippets",
        "type": "QMap",
        "final": "QString",
        "notr": true
      }
    ],
    "notr": true
  },
  {
    "name": "Run On Empty Testcase",
    "desc": "Run your codes on empty test cases",
    "type": "bool",
    "tip": "Run your code on all non-hidden test cases even if the input is empty."
  },
  {
    "name": "Check On Testcases With Empty Output",
    "desc": "Check your answer on test cases with empty output",
    "type": "bool",
    "tip": "Check your answer even if your output or the expected output is empty."
  },
  {
    "name": "Test Case Maximum Height",
    "type": "int",
    "default": 300,
    "param": "QVariantList {30, 2000}",
    "tip": "The maximum height of a test case without a scrollbar in pixels."
  },
  {
    "name": "Proxy/Enabled",
    "desc": "Enable proxy for checking updates",
    "type": "bool",
    "default": "true",
    "docAnchor": "network-proxy",
    "tip": "Enable proxy to connect to GitHub while checking updates"
  },
  {
    "name": "Proxy/Type",
    "desc": "Type",
    "type": "QString",
    "default": "System",
    "ui": "QComboBox",
    "param": "QStringList { \"System\", \"Http\", \"Socks5\" }",
    "docAnchor": "network-proxy",
    "tip": "The type of the proxy. \"System\" for using the system proxy."
  },
  {
    "name": "Proxy/Host Name",
    "desc": "Host Name",
    "type": "QString",
    "default": "127.0.0.1",
    "depends": [
      {
        "name": "Proxy/Type",
        "check": "return var.toString() != \"System\";"
      }
    ],
    "docAnchor": "network-proxy",
    "tip": "The hostname of the proxy, e.g. 127.0.0.1"
  },
  {
    "name": "Proxy/Port",
    "desc": "Port",
    "type": "int",
    "default": 1080,
    "param": "QVariantList {1024,49151}",
    "depends": [
      {
        "name": "Proxy/Type",
        "check": "return var.toString() != \"System\";"
      }
    ],
    "docAnchor": "network-proxy",
    "tip": "The port of the proxy, e.g. 1080"
  },
  {
    "name": "Proxy/User",
    "desc": "User",
    "type": "QString",
    "depends": [
      {
        "name": "Proxy/Type",
        "check": "return var.toString() != \"System\";"
      }
    ],
    "docAnchor": "network-proxy",
    "tip": "The user of the proxy server. It can be empty if the proxy server doesn't require authentication."
  },
  {
    "name": "Proxy/Password",
    "desc": "Password",
    "type": "QString",
    "depends": [
      {
        "name": "Proxy/Type",
        "check": "return var.toString() != \"System\";"
      }
    ],
    "docAnchor": "network-proxy",
    "tip": "The password of the proxy server. It can be empty if the proxy server doesn't require authentication."
  },
  {
    "name": "C++/Compiler Output Codec",
    "type": "QString",
    "default": "UTF-8",
    "ui": "CodecBox",
    "tip": "Text codec of the compiler output (errors, warnings, etc.)"
  },
  {
    "name": "Java/Compiler Output Codec",
    "type": "QString",
    "default": "UTF-8",
    "ui": "CodecBox",
    "tip": "Text codec of the compiler output (errors, warnings, etc.)"
  },
  {
    "name": "Default Path/Names And Paths",
    "type": "QVariantList",
    "param": "QVariantList { QStringList { tr(\"Name\"), tr(\"The name of a default path\") }, QStringList { tr(\"Path\"), tr(\"The path of a default path\") } }",
    "tip": "A list of default paths.\nThey can be used in actions' corresponding default paths by using ${<default path name>} as a place holder.\nThey can be either manually set or automatically changed after choosing a path for an action."
  },
  {
    "name": "Auto Load External Changes If No Unsaved Modification",
    "desc": "Auto-load external file changes if there's no unsaved modification",
    "type": "bool",
    "default": "true",
    "tip": "Automatically load file changes that are not made in CP Editor if there's no unsaved modification in CP Editor."
  },
  {
    "name": "Ask For Loading External Changes",
    "desc": "Ask whether to load external file changes",
    "type": "bool",
    "default": "true",
    "trtip": "tr(\"When there are file changes that are not made in CP Editor and is not automatically loaded by\\n\\\"%1\\\", ask for whether to load the changes.\\nIf this is disabled, external file changes will be ignored unless they are loaded by\\n\\\"%1\\\".\").arg(tr(\"Auto-load external file changes if there's no unsaved modification\"))"
  },
  {
    "name": "Recent Files",
    "type": "QStringList",
    "notr": true
  },
  {
    "name": "Number Of Problems In Contest",
    "type": "int",
    "default": 5,
    "notr": true
  },
  {
    "name": "First Time User",
    "type": "bool",
    "default": true,
    "notr": true
  },
  {
    "name": "Show Only Monospaced Font",
    "type": "bool",
    "default": true,
    "immediatelyApply": true,
    "tip": "Show only monospaced fonts when choosing a font"
  },
  {
    "name": "Total Usage Time",
    "type": "int",
    "notr": true
  },
  {
    "name": "Promotion Dialog Shown",
    "type": "bool",
    "notr": true
  },
  {
    "name": "Auto Uncheck Accepted Testcases",
    "type": "bool",
    "default": "false",
    "tip": "Automatically uncheck test cases when they get accepted."
  },
  {
    "name": "Full Screen Dialog Shown",
    "type": "bool",
    "default": false,
    "notr": true
  },
  {
    "name": "WakaTime/Path",
    "desc": "Path",
    "type": "QString",
    "default": "wakatime",
    "ui": "PathItem",
    "param": "PathItem::Executable",
    "tip": "The path to the WakaTime executable file",
    "depends": [
      {
        "name": "WakaTime/Enable"
      }
    ]
  },
  {
    "name": "WakaTime/Api Key",
    "desc": "Api Key",
    "type": "QString",
    "depends": [
      {
        "name": "WakaTime/Enable"
      }
    ],
    "tip": "Can be found at https://wakatime.com/settings/account.\nIt can be empty if you have the global wakatime config file ~/.wakatime.cfg."
  },
  {
    "name": "WakaTime/Enable",
    "desc": "Enable WakaTime",
    "type": "bool",
    "default": false
  },
  {
    "name": "WakaTime/Proxy",
    "desc": "Use Proxy",
    "type": "bool",
    "default": false,
    "tip": "Use Advanced->Network Proxy to send data to WakaTime.",
    "depends": [
      {
        "name": "WakaTime/Enable"
      }
    ]
  },
  {
    "name": "Display Stopwatch",
    "type": "bool",
    "default": false
  },
  {
    "name": "Toggle Stopwatch On Tab Switch",
    "desc": "Start/Stop stopwatch on tab switch",
    "type": "bool",
    "default": false,
    "tip": "When switching to a different tab, automatically start the stopwatch\non the current tab and pause the stopwatch on the previous tab.",
    "depends": [
      {
        "name": "Display Stopwatch"
      }
    ]
  },
  {
    "name": "Hide Stopwatch Result",
    "desc": "Show stopwatch result only when the button is pressed",
    "type": "bool",
    "default": false,
    "tip": "Hide the time of the stopwatch and only show the time when the \"Show\" button is pressed.\nThis may reduce distractions caused by stopwatch updates.",
    "depends": [
      {
        "name": "Display Stopwatch"
      }
    ]
  }
]
