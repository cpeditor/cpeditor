name: "Release"

on:
  push:
    tags:
      - "*"

env:
  QT_VERSION: 5.15.2
  WINLIBS_GCC: 11.1.0
  WINLIBS_LLVM: 12.0.0
  WINLIBS_MINGW: 9.0.0-r2

jobs:
  # "env" is only available in jobs, we need to convert them to outputs so that they can be used in the matrix
  get-winlibs-outputs:
    runs-on: ubuntu-latest
    steps:
      - name: Get winlibs outputs
        id: get
        run: |
          echo ::set-output name=GCC::$WINLIBS_GCC
          echo ::set-output name=LLVM::$WINLIBS_LLVM
          echo ::set-output name=MINGW::$WINLIBS_MINGW
          echo ::set-output name=tag::$WINLIBS_GCC-$WINLIBS_LLVM-$WINLIBS_MINGW
    outputs:
      GCC: ${{ steps.get.outputs.GCC }}
      LLVM: ${{ steps.get.outputs.LLVM }}
      MINGW: ${{ steps.get.outputs.MINGW }}
      tag: ${{ steps.get.outputs.tag }}

  release:
    name: "OS: ${{ matrix.config.os }} Arch: ${{ matrix.config.arch }} Portable: ${{ matrix.config.portable-option }} Winlibs: ${{ matrix.config.winlibs }}"
    runs-on: "${{ matrix.config.os }}"
    needs: get-winlibs-outputs
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: "ubuntu-18.04"
            portable-option: "Off"
            winlibs: false
          - os: "macos-latest"
            portable-option: "Off"
            winlibs: false
          - os: "windows-latest"
            arch: x64
            platform: x64
            qtarch: win64_msvc2019_64
            portable-option: "Off"
            filename-suffix: "setup.exe"
            winlibs: false
          - os: "windows-latest"
            arch: x64
            platform: x64
            qtarch: win64_msvc2019_64
            portable-option: "On"
            filename-suffix: "portable.zip"
            winlibs: false
          - os: "windows-latest"
            arch: x86
            platform: Win32
            qtarch: win32_msvc2019
            portable-option: "Off"
            filename-suffix: "setup.exe"
            winlibs: false
          - os: "windows-latest"
            arch: x86
            platform: Win32
            qtarch: win32_msvc2019
            portable-option: "On"
            filename-suffix: "portable.zip"
            winlibs: false
          - os: "windows-latest"
            arch: x64
            platform: x64
            qtarch: win64_msvc2019_64
            portable-option: "Off"
            filename-suffix: "setup-with-gcc-${{ needs.get-winlibs-outputs.outputs.GCC }}-LLVM-${{ needs.get-winlibs-outputs.outputs.LLVM }}.exe"
            winlibs: true
            winlibs-arch: x86_64-posix-seh
            mingw-arch: mingw64
          - os: "windows-latest"
            arch: x64
            platform: x64
            qtarch: win64_msvc2019_64
            portable-option: "On"
            filename-suffix: "portable-with-gcc-${{ needs.get-winlibs-outputs.outputs.GCC }}-LLVM-${{ needs.get-winlibs-outputs.outputs.LLVM }}.zip"
            winlibs: true
            winlibs-arch: x86_64-posix-seh
            mingw-arch: mingw64
          - os: "windows-latest"
            arch: x86
            platform: Win32
            qtarch: win32_msvc2019
            portable-option: "Off"
            filename-suffix: "setup-with-gcc-${{ needs.get-winlibs-outputs.outputs.GCC }}-LLVM-${{ needs.get-winlibs-outputs.outputs.LLVM }}.exe"
            winlibs: true
            winlibs-arch: i686-posix-dwarf
            mingw-arch: mingw32
          - os: "windows-latest"
            arch: x86
            platform: Win32
            qtarch: win32_msvc2019
            portable-option: "On"
            filename-suffix: "portable-with-gcc-${{ needs.get-winlibs-outputs.outputs.GCC }}-LLVM-${{ needs.get-winlibs-outputs.outputs.LLVM }}.zip"
            winlibs: true
            winlibs-arch: i686-posix-dwarf
            mingw-arch: mingw32

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Qt environment
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VERSION }}
          arch: ${{ matrix.config.qtarch }}

      - name: "[Windows] Build"
        if: matrix.config.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake .. -A ${{ matrix.config.platform }} -DPORTABLE_VERSION=${{ matrix.config.portable-option }}
          cmake --build . --config Release -j4

      - name: "[Linux/macOS] Build"
        if: matrix.config.os != 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPORTABLE_VERSION=${{ matrix.config.portable-option }}
          cmake --build . --config Release -j4

      - name: Get the version
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo ::set-output name=VERSION::$VERSION
          STABLE_VERSION=$(cat dist/STABLE_VERSION)
          if [[ $VERSION == "$STABLE_VERSION"* ]]; then
            echo ::set-output name=ISBETA::false
          else
            echo ::set-output name=ISBETA::true
          fi

      - name: "[Linux] Pack to AppImage"
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt install libxcb*
          cd build
          wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt*.AppImage
          export VERSION=${{ steps.get_version.outputs.VERSION }}
          cp ../dist/linux/cpeditor.desktop default.desktop
          cp ../resources/icon.png cpeditor.png
          ./linuxdeployqt*.AppImage ./cpeditor -appimage -qmake=../../Qt/${{ env.QT_VERSION }}/gcc_64/bin/qmake
          mv CP_Editor-${{steps.get_version.outputs.VERSION }}-x86_64.AppImage cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-x86_64.AppImage

      - name: "[Linux] Release AppImage"
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: build/cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-x86_64.AppImage
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "[Linux] Pack to deb"
        if: startsWith(matrix.config.os, 'ubuntu')
        id: deb-package
        run: |
          pkgname="cpeditor-${{ steps.get_version.outputs.VERSION }}-linux-amd64"
          echo "::set-output name=pkgname::${pkgname}"

          mkdir -p ${pkgname}/usr/share/
          cd ${pkgname}/usr/share/

          mkdir applications/
          cp ${{ github.workspace }}/dist/linux/cpeditor.desktop ./applications

          mkdir -p cpeditor/bin/
          cp ${{ github.workspace }}/dist/DEB/cpeditor.sh ./cpeditor/
          cp -r ${{ github.workspace }}/build/plugins/ ./cpeditor
          cp ${{ github.workspace }}/build/cpeditor ./cpeditor/bin/

          mkdir -p doc/cpeditor/
          cp ${{ github.workspace }}/LICENSE ./doc/cpeditor/copyright

          mkdir icons/
          cp ${{ github.workspace }}/resources/icon.png ./icons/cpeditor.png

          cp -r ${{ github.workspace }}/build/translations/ ./cpeditor

          cd ../
          mkdir -p lib/cpeditor/
          cp ${{ github.workspace }}/build/lib/* ./lib/cpeditor

          cd ..
          cp -r ${{ github.workspace }}/dist/DEB/DEBIAN .
          wget -c "http://archive.ubuntu.com/ubuntu/pool/universe/h/hashdeep/md5deep_4.4-4_all.deb"
          wget -c "http://archive.ubuntu.com/ubuntu/pool/universe/h/hashdeep/hashdeep_4.4-4_amd64.deb"
          sudo apt install ./*.deb
          rm *.deb
          md5deep -rl usr/ > ./DEBIAN/md5sums
          cd DEBIAN
          chmod 775 p*
          sed -i "s/\${ver}/${{ steps.get_version.outputs.VERSION }}/" control
          SIZE=$(du -s ../../${pkgname} | cut -f1)
          sed -i "s/\${size}/${SIZE}/" control

          cd ${{ github.workspace }}/
          fakeroot dpkg-deb --build ${pkgname}

      - name: "[Linux] Release deb"
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: ${{ steps.deb-package.outputs.pkgname }}.deb
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "[Linux] Package full Source"
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          shopt -s extglob # enable "!(...)"
          mv .git/objects/pack .
          git unpack-objects < pack/*.pack
          rm -rf pack .git/objects/!($(git rev-parse @ | cut -c-2)) .git/objects/$(git rev-parse @ | cut -c-2)/!($(git rev-parse @ | cut -c3-))
          wget https://raw.githubusercontent.com/Kentzo/git-archive-all/master/git_archive_all.py
          python3 git_archive_all.py cpeditor-${{ steps.get_version.outputs.VERSION }}-full-source.tar.gz --extra=.git/HEAD --extra=.git/refs --extra=.git/objects

      - name: "[Linux] Release full source"
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: cpeditor-${{ steps.get_version.outputs.VERSION }}-full-source.tar.gz
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "[macOS] Pack to dmg"
        if: startsWith(matrix.config.os, 'macos')
        run: |
          cd build
          ../../Qt/*/*/bin/macdeployqt cpeditor.app
          cp ../dist/mac/cpeditor.icns cpeditor.app/Contents/Resources
          hdiutil create -volname cpeditor-${{ steps.get_version.outputs.VERSION }}-x64 -srcfolder cpeditor.app -ov -format UDZO cpeditor-${{ steps.get_version.outputs.VERSION }}-macos-x64.dmg

      - name: "[macOS] Release"
        if: startsWith(matrix.config.os, 'macos')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: build/cpeditor-${{ steps.get_version.outputs.VERSION }}-macos-x64.dmg
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "[Windows] Gather dependencies"
        if: startsWith(matrix.config.os, 'windows')
        shell: bash
        run: |
          mkdir build/out
          mv build/Release/cpeditor.exe build/out
          ../Qt/*/*/bin/windeployqt.exe build/out/cpeditor.exe --no-translations
          cd "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC"
          echo "VC_REDIST_VERSION=$(ls -dr *.* | head -n1)" >> $GITHUB_ENV

      - name: "[Windows] Get Winlibs asset name"
        if: startsWith(matrix.config.os, 'windows') && matrix.config.winlibs
        id: winlibs
        shell: bash
        run: echo "::set-output name=asset::winlibs-${{ matrix.config.winlibs-arch }}-gcc-${{ needs.get-winlibs-outputs.outputs.GCC }}-llvm-${{ needs.get-winlibs-outputs.outputs.LLVM }}-mingw-w64-${{ needs.get-winlibs-outputs.outputs.MINGW }}.7z"

      - name: "[Windows] Download Winlibs"
        if: startsWith(matrix.config.os, 'windows') && matrix.config.winlibs
        uses: robinraju/release-downloader@v1
        with:
          repository: brechtsanders/winlibs_mingw
          tag: ${{ needs.get-winlibs-outputs.outputs.tag }}
          fileName: ${{ steps.winlibs.outputs.asset }}

      - name: "[Windows] Extract Winlibs"
        if: startsWith(matrix.config.os, 'windows') && matrix.config.winlibs
        shell: bash
        run: 7z x ${{ steps.winlibs.outputs.asset }} -obuild/out

      - name: "[Windows] Pack to installer"
        if: startsWith(matrix.config.os, 'windows') && matrix.config.portable-option == 'Off'
        shell: bash
        run: |
          mkdir build/out/Redist
          cp "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/vc_redist.${{ matrix.config.arch }}.exe" build/out/Redist
          iscc dist/win/win-setup.iss \
            -DArch=${{ matrix.config.arch }} \
            $([[ "${{ matrix.config.winlibs }}" == "true" ]] && echo '-DGccDir=${{ matrix.config.mingw-arch }}' || echo '') \
            -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} \
            -DMyProjectRoot=$(pwd) \
            -DMyOutRoot=$(pwd)/build/out \
            -DVC_REDIST_VERSION=$VC_REDIST_VERSION
          mv cpeditor-setup.exe cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-${{ matrix.config.arch }}-${{ matrix.config.filename-suffix }}

      - name: "[Windows] Pack to portable"
        if: startsWith(matrix.config.os, 'windows') && matrix.config.portable-option == 'On'
        shell: bash
        run: |
          cp "C:/Program Files (x86)/Microsoft Visual Studio"/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/${{ matrix.config.arch }}/Microsoft.*.CRT/*.dll build/out
          cd build/out
          7z a ../../cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-${{ matrix.config.arch }}-${{ matrix.config.filename-suffix }} ./*

      - name: "[Windows] Release"
        if: startsWith(matrix.config.os, 'windows')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ steps.get_version.outputs.ISBETA }}
          files: cpeditor-${{ steps.get_version.outputs.VERSION }}-windows-${{ matrix.config.arch }}-${{ matrix.config.filename-suffix }}
          name: CP Editor ${{ steps.get_version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
